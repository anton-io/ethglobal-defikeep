#!/usr/bin/env python3

from config import *


def _exec_transaction(transaction):
    # Helper function to execute the transaction.
    try:
        # Sign the transaction with your private key.
        signed_transaction = w3.eth.account.sign_transaction(transaction, PKEY)

        # Send the signed transaction.
        tx_hash = w3.eth.send_raw_transaction(signed_transaction.rawTransaction)

        # Wait for the transaction to be mined.
        receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
        log.info(f"receipt: {receipt}")
        log.info(f"Transaction successful with hash: {tx_hash.hex()}")

    except Exception as e:
        log.error(f"Error with transaction: {e}")


def show_balance(addr=addr_mine):
    # Get the balance in wei (the smallest unit of native token).
    balance_wei = w3.eth.get_balance(addr)

    # Convert balance from wei to ether (1 ether = 10^18 wei).
    balance_native_token = w3.from_wei(balance_wei, 'ether')

    log.info(f"Balance of address {addr} is: {balance_native_token}")


def lock(amount, addr=addr_mine, seconds_lock=120):
    amount_wei = w3.to_wei(amount, 'ether')
    transaction = contract.functions.lock(addr, seconds_lock).build_transaction({
        'value': amount_wei,
        'nonce': w3.eth.get_transaction_count(addr_mine),
        'from': addr_mine,
    })
    _exec_transaction(transaction)


def get_lock_details(addr=addr_mine, lock_id=0):
    try:
        # Get lock details:
        lock_details = contract.functions.lockDetails(addr, lock_id).call()
        ret = {
            'addr': lock_details[0],
            'amount': w3.from_wei(lock_details[1], 'ether'),
            'time_locked': lock_details[2],
            'time_unlock': lock_details[3],
            'reclaimed': lock_details[4],
        }
        log.info(f"Lock details: {ret}")
        return ret
    except Exception as e:
        log.error(f"looking up lock details for: {addr}/{lock_id}")
        return {}


def reclaim(lock_id=0):
    transaction = contract.functions.reclaim(lock_id).build_transaction({
        'nonce': w3.eth.get_transaction_count(addr_mine),
        'from': addr_mine,
    })
    _exec_transaction(transaction)


def update_reclaim_address(lock_id, addr_new):
    transaction = contract.functions.updateReclaimAddress(lock_id, addr_new).build_transaction({
        'nonce': w3.eth.get_transaction_count(addr_mine),
        'from': addr_mine,
    })
    _exec_transaction(transaction)


def validate():
    # (un)Comment as necessary to test/validate contract functionality:
    show_balance()
    # lock(amount=0.001, addr=addr_mine, seconds_lock=60)
    # get_lock_details(lock_id=0)
    ## update_reclaim_address(0, '<new-address>')
    # reclaim(lock_id=0)
    # show_balance()


if __name__ == "__main__":
    validate()
